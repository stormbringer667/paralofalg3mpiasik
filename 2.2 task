// task2_send.cpp
#include <mpi.h>
#include <iostream>
#include <vector>

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);
    int rank, size, n;

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    std::vector<float> B;

    if (rank == 0) {
        std::cin >> n;
        std::vector<float> A(n * n), C(n * n);
        B.resize(n * n);
        for (int i = 0; i < n * n; i++) std::cin >> A[i];
        for (int i = 0; i < n * n; i++) std::cin >> B[i];

        for (int p = 1; p < size; p++) {
            MPI_Send(&n, 1, MPI_INT, p, 0, MPI_COMM_WORLD);
            MPI_Send(B.data(), n * n, MPI_FLOAT, p, 1, MPI_COMM_WORLD);
            MPI_Send(&A[p * n * n / size], n * n / size, MPI_FLOAT, p, 2, MPI_COMM_WORLD);
        }

        for (int i = 0; i < n / size; ++i)
            for (int j = 0; j < n; ++j)
                for (int k = 0; k < n; ++k)
                    C[i * n + j] += A[i * n + k] * B[k * n + j];

        for (int p = 1; p < size; p++)
            MPI_Recv(&C[p * n * n / size], n * n / size, MPI_FLOAT, p, 3, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        for (int i = 0; i < n * n; i++) {
            std::cout << C[i] << " ";
            if ((i + 1) % n == 0) std::cout << std::endl;
        }

    } else {
        MPI_Recv(&n, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        B.resize(n * n);
        MPI_Recv(B.data(), n * n, MPI_FLOAT, 0, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        std::vector<float> local_A(n * n / size), local_C(n * n / size, 0);
        MPI_Recv(local_A.data(), n * n / size, MPI_FLOAT, 0, 2, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        int rows = n / size;
        for (int i = 0; i < rows; ++i)
            for (int j = 0; j < n; ++j)
                for (int k = 0; k < n; ++k)
                    local_C[i * n + j] += local_A[i * n + k] * B[k * n + j];

        MPI_Send(local_C.data(), n * n / size, MPI_FLOAT, 0, 3, MPI_COMM_WORLD);
    }

    MPI_Finalize();
    return 0;
}
