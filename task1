// task1.cpp
#include <mpi.h>
#include <iostream>
#include <string>

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    std::string word = "Parallelization";
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    int len = word.length();
    if (size != len) {
        if (rank == 0) std::cout << "Please run with " << len << " processes." << std::endl;
        MPI_Finalize();
        return 0;
    }

    char local_char;
    MPI_Scatter(word.data(), 1, MPI_CHAR, &local_char, 1, MPI_CHAR, 0, MPI_COMM_WORLD);
    std::cout << "Process " << rank << " received '" << local_char << "'" << std::endl;

    char reversed[100];
    MPI_Gather(&local_char, 1, MPI_CHAR, reversed, 1, MPI_CHAR, len - rank - 1, MPI_COMM_WORLD);

    if (rank == len - 1) {
        std::cout << "Reversed word: ";
        for (int i = 0; i < len; i++) std::cout << reversed[i];
        std::cout << std::endl;
    }

    MPI_Finalize();
    return 0;
}
