// task2_scatter.cpp
#include <mpi.h>
#include <iostream>
#include <vector>

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);
    int rank, size, n;

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    std::vector<float> A, B, C, local_A, local_C;

    if (rank == 0) {
        std::cin >> n;
        A.resize(n * n);
        B.resize(n * n);
        C.resize(n * n);
        for (int i = 0; i < n * n; i++) std::cin >> A[i];
        for (int i = 0; i < n * n; i++) std::cin >> B[i];
    }

    MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);
    B.resize(n * n);
    MPI_Bcast(B.data(), n * n, MPI_FLOAT, 0, MPI_COMM_WORLD);

    int rows_per_proc = n / size;
    local_A.resize(rows_per_proc * n);
    local_C.resize(rows_per_proc * n);

    MPI_Scatter(A.data(), rows_per_proc * n, MPI_FLOAT,
                local_A.data(), rows_per_proc * n, MPI_FLOAT,
                0, MPI_COMM_WORLD);

    for (int i = 0; i < rows_per_proc; ++i) {
        for (int j = 0; j < n; ++j) {
            local_C[i * n + j] = 0;
            for (int k = 0; k < n; ++k) {
                local_C[i * n + j] += local_A[i * n + k] * B[k * n + j];
            }
        }
    }

    MPI_Gather(local_C.data(), rows_per_proc * n, MPI_FLOAT,
               C.data(), rows_per_proc * n, MPI_FLOAT,
               0, MPI_COMM_WORLD);

    if (rank == 0) {
        for (int i = 0; i < n * n; i++) {
            std::cout << C[i] << " ";
            if ((i + 1) % n == 0) std::cout << std::endl;
        }
    }

    MPI_Finalize();
    return 0;
}
